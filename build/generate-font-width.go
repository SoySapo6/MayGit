// Copyright 2025 The Gitea Authors. All rights reserved.
// SPDX-License-Identifier: MIT

//go:build ignore

package main

import (
	"archive/zip"
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"unicode"

	"golang.org/x/image/font"
	"golang.org/x/image/font/sfnt"
)

const dejavuZip = "https://github.com/dejavu-fonts/dejavu-fonts/releases/download/version_2_37/dejavu-sans-ttf-2.37.zip"

var flagOut = flag.String("o", "modules/badge/badge_font_width.go", "out")

func main() {
	flag.Parse()

	ttfFont := extractFont()

	str := "map[rune]int32{\n"
	for r := rune(0); r <= unicode.MaxRune; r++ {
		if !unicode.IsPrint(r) {
			continue
		}

		glyphIndex, err := ttfFont.GlyphIndex(nil, r)
		if err != nil {
			log.Fatalf("Failed to find glyph for rune %s: %v", string(r), err)
		} else if glyphIndex == 0 {
			continue
		}

		advancedWidth, err := ttfFont.GlyphAdvance(nil, glyphIndex, 11, font.HintingNone)
		if err != nil {
			log.Fatalf("Failed to find font width for rune %s: %v", string(r), err)
		} else if advancedWidth == 0 {
			continue
		}

		str += fmt.Sprintf("\t%d: %d,\n", r, advancedWidth)
	}
	str += "}"

	data, err := format.Source([]byte(str))
	if err != nil {
		log.Fatalf("Failed to format generated code: %v", err)
	}

	err = os.WriteFile(*flagOut, []byte(fmt.Sprintf(hdr, dejavuZip, data)), 0o644)
	if err != nil {
		log.Fatalf("Failed to write file: %v", err)
	}
}

func extractFont() *sfnt.Font {
	resp, err := http.Get(dejavuZip)
	if err != nil {
		log.Fatalf("Failed to download archive: %v", err)
	}
	defer resp.Body.Close()

	buf, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Failed to read download archive: %v", err)
	}

	bufReader := io.NewSectionReader(bytes.NewReader(buf), 0, int64(len(buf)))

	archive, err := zip.NewReader(bufReader, int64(len(buf)))
	if err != nil {
		log.Fatalf("Failed to unzip archive: %v", err)
	}

	var fontBytes []byte
	for _, file := range archive.File {
		if strings.HasSuffix(file.Name, ".ttf") {
			ttfFile, err := file.Open()
			if err != nil {
				log.Fatalf("Failed to extract font from archive: %v", err)
			}

			if fontBytes, err = io.ReadAll(ttfFile); err != nil {
				log.Fatalf("Failed to extract font from archive: %v", err)
			}

			break
		}
	}
	if fontBytes == nil {
		log.Fatalf("Failed to find font in archive")
	}

	font, err := sfnt.Parse(fontBytes)
	if err != nil {
		log.Fatalf("Failed to parse font: %v", err)
	}

	return font
}

const hdr = `// Copyright 2025 The Gitea Authors. All rights reserved.
// SPDX-License-Identifier: MIT

package badge

// Code generated by build/generate-font-width.go. DO NOT EDIT.
// Sourced from %s
var DejaVuFontWidthData = %s
`
